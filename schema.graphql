# source: http://localhost:8000/graphql
# timestamp: Thu Jun 06 2019 16:13:54 GMT+1000 (Australian Eastern Standard Time)

input CreateFolderMutationInput {
  id: String
  name: String!
  root: Boolean
  parent: String
  clientMutationId: String
}

"""Creates a folder """
type CreateFolderMutationPayload {
  id: String
  name: String
  root: Boolean
  parent: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input CreateLabelMutationInput {
  id: String
  name: String!
  color: String!
  clientMutationId: String
}

"""Creates a label """
type CreateLabelMutationPayload {
  id: String
  name: String
  color: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input CreateTaskMutationInput {
  id: String
  name: String!
  duration: String!
  done: Boolean
  dependencies: String
  parent: String
  labels: String
  due: DateTime
  ownerId: String
  clientMutationId: String
}

"""Creates a task """
type CreateTaskMutationPayload {
  id: String
  name: String
  duration: String
  done: Boolean
  dependencies: String
  parent: String
  labels: String
  due: DateTime
  ownerId: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

input DeleteFolderMutationInput {
  id: String
  clientMutationId: String
}

"""Deletes a folder given"""
type DeleteFolderMutationPayload {
  id: String
  name: String
  root: Boolean
  parent: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input DeleteLabelMutationInput {
  id: String
  clientMutationId: String
}

"""Deletes a label given"""
type DeleteLabelMutationPayload {
  id: String
  name: String
  color: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input DeleteTaskMutationInput {
  id: String
  clientMutationId: String
}

"""Deletes a task given"""
type DeleteTaskMutationPayload {
  id: String
  name: String
  duration: String
  done: Boolean
  dependencies: String
  parent: String
  labels: String
  due: DateTime
  ownerId: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

type ErrorType {
  field: String!
  messages: [String!]!
}

type FolderNode implements Node {
  """The ID of the object."""
  id: ID!
  name: String!
  root: Boolean!
  parent: FolderNode
  tasks(before: String, after: String, first: Int, last: Int, duration: String, due: DateTime, done: Boolean, parent: ID, dependencies: [ID], labels: [ID]): TaskNodeConnection
  folders(before: String, after: String, first: Int, last: Int, id: UUID, name: String, root: Boolean, parent: ID): FolderNodeConnection
}

type FolderNodeConnection {
  pageInfo: PageInfo!
  edges: [FolderNodeEdge]!
}

type FolderNodeEdge {
  """The item at the end of the edge"""
  node: FolderNode

  """A cursor for use in pagination"""
  cursor: String!
}

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

type LabelNode implements Node {
  """The ID of the object."""
  id: ID!
  name: String!
  color: String!
  taskSet(before: String, after: String, first: Int, last: Int, duration: String, due: DateTime, done: Boolean, parent: ID, dependencies: [ID], labels: [ID]): TaskNodeConnection
}

type LabelNodeConnection {
  pageInfo: PageInfo!
  edges: [LabelNodeEdge]!
}

type LabelNodeEdge {
  """The item at the end of the edge"""
  node: LabelNode

  """A cursor for use in pagination"""
  cursor: String!
}

type Mutation {
  taskAdd(input: CreateTaskMutationInput!): CreateTaskMutationPayload
  taskUpdate(input: UpdateTaskMutationInput!): UpdateTaskMutationPayload
  taskDelete(input: DeleteTaskMutationInput!): DeleteTaskMutationPayload
  folderAdd(input: CreateFolderMutationInput!): CreateFolderMutationPayload
  folderUpdate(input: UpdateFolderMutationInput!): UpdateFolderMutationPayload
  folderDelete(input: DeleteFolderMutationInput!): DeleteFolderMutationPayload
  labelAdd(input: CreateLabelMutationInput!): CreateLabelMutationPayload
  labelUpdate(input: UpdateLabelMutationInput!): UpdateLabelMutationPayload
  labelDelete(input: DeleteLabelMutationInput!): DeleteLabelMutationPayload
  tokenAuth(username: String!, password: String!): ObtainJSONWebToken
  verifyToken(token: String!): Verify
  refreshToken(token: String!): Refresh
}

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

"""Obtain JSON Web Token mutation"""
type ObtainJSONWebToken {
  token: String
}

type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  """The ID of the object"""
  task(id: ID!): TaskNode
  allTasks(before: String, after: String, first: Int, last: Int, duration: String, due: DateTime, done: Boolean, parent: ID, dependencies: [ID], labels: [ID]): TaskNodeConnection

  """The ID of the object"""
  folder(id: ID!): FolderNode
  allFolders(before: String, after: String, first: Int, last: Int, id: UUID, name: String, root: Boolean, parent: ID): FolderNodeConnection

  """The ID of the object"""
  label(id: ID!): LabelNode
  allLabels(before: String, after: String, first: Int, last: Int, name: String, color: String, id: UUID): LabelNodeConnection
  statistics: StatisticsNode
}

type Refresh {
  token: String
  payload: GenericScalar
}

type StatisticsNode {
  urgency: Float
  velocity: Float
  bait: Float
  todo(before: String, after: String, first: Int, last: Int, duration: String, due: DateTime, done: Boolean, parent: ID, dependencies: [ID], labels: [ID]): TaskNodeConnection
}

type TaskNode implements Node {
  """The ID of the object."""
  id: ID!
  name: String!
  duration: Float!
  due: DateTime
  done: Boolean!
  parent: FolderNode
  dependencies(before: String, after: String, first: Int, last: Int, duration: String, due: DateTime, done: Boolean, parent: ID, dependencies: [ID], labels: [ID]): TaskNodeConnection
  labels(before: String, after: String, first: Int, last: Int, name: String, color: String, id: UUID): LabelNodeConnection
  dependents(before: String, after: String, first: Int, last: Int, duration: String, due: DateTime, done: Boolean, parent: ID, dependencies: [ID], labels: [ID]): TaskNodeConnection
  urgency: Float
}

type TaskNodeConnection {
  pageInfo: PageInfo!
  edges: [TaskNodeEdge]!
}

type TaskNodeEdge {
  """The item at the end of the edge"""
  node: TaskNode

  """A cursor for use in pagination"""
  cursor: String!
}

input UpdateFolderMutationInput {
  name: String!
  root: Boolean
  parent: String
  clientMutationId: String
}

"""Updates a folder given"""
type UpdateFolderMutationPayload {
  id: String
  name: String
  root: Boolean
  parent: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input UpdateLabelMutationInput {
  name: String!
  color: String!
  clientMutationId: String
}

"""Updates a label given"""
type UpdateLabelMutationPayload {
  id: String
  name: String
  color: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input UpdateTaskMutationInput {
  name: String!
  duration: String!
  done: Boolean
  dependencies: String
  parent: String
  labels: String
  due: DateTime
  ownerId: String
  clientMutationId: String
}

"""Updates a task given"""
type UpdateTaskMutationPayload {
  id: String
  name: String
  duration: String
  done: Boolean
  dependencies: String
  parent: String
  labels: String
  due: DateTime
  ownerId: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

"""UUID"""
scalar UUID

type Verify {
  payload: GenericScalar
}
